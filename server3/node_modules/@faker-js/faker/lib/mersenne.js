"use strict";
exports.__esModule = true;
exports.Mersenne = void 0;
var Gen = require('../vendor/mersenne').MersenneTwister19937;
var Mersenne = /** @class */ (function () {
    function Mersenne() {
        this.gen = new Gen();
        this.gen.init_genrand(new Date().getTime() % 1000000000);
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Mersenne.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    Mersenne.prototype.rand = function (max, min) {
        // TODO @Shinigami92 2022-01-11: This is buggy, cause if min is not passed but only max,
        // then min will be undefined and this result in NaN for the whole function
        if (max === undefined) {
            min = 0;
            max = 32768;
        }
        return Math.floor(this.gen.genrand_real2() * (max - min) + min);
    };
    Mersenne.prototype.seed = function (S) {
        if (typeof S != 'number') {
            throw new Error('seed(S) must take numeric argument; is ' + typeof S);
        }
        this.gen.init_genrand(S);
    };
    Mersenne.prototype.seed_array = function (A) {
        if (typeof A != 'object') {
            throw new Error('seed_array(A) must take array of numbers; is ' + typeof A);
        }
        this.gen.init_by_array(A, A.length);
    };
    return Mersenne;
}());
exports.Mersenne = Mersenne;
