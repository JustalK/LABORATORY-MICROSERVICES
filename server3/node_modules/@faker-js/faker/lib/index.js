"use strict";
exports.__esModule = true;
exports.Faker = void 0;
var address_1 = require("./address");
var animal_1 = require("./animal");
var commerce_1 = require("./commerce");
var company_1 = require("./company");
var database_1 = require("./database");
var datatype_1 = require("./datatype");
var date_1 = require("./date");
var fake_1 = require("./fake");
var finance_1 = require("./finance");
var git_1 = require("./git");
var hacker_1 = require("./hacker");
var helpers_1 = require("./helpers");
var image_1 = require("./image");
var internet_1 = require("./internet");
var lorem_1 = require("./lorem");
var mersenne_1 = require("./mersenne");
var music_1 = require("./music");
var name_1 = require("./name");
var phone_number_1 = require("./phone_number");
var random_1 = require("./random");
var system_1 = require("./system");
var time_1 = require("./time");
var unique_1 = require("./unique");
var vehicle_1 = require("./vehicle");
var word_1 = require("./word");
var Faker = /** @class */ (function () {
    function Faker(opts) {
        if (opts === void 0) { opts = {}; }
        // TODO @Shinigami92 2022-01-11: For now we loose types here
        // @ts-expect-error: will be lazy filled by constructor
        this.definitions = {};
        this.definitionTypes = {
            name: [
                'first_name',
                'last_name',
                'prefix',
                'suffix',
                'binary_gender',
                'gender',
                'title',
                'male_prefix',
                'female_prefix',
                'male_first_name',
                'female_first_name',
                'male_middle_name',
                'female_middle_name',
                'male_last_name',
                'female_last_name',
            ],
            address: [
                'city_name',
                'city_prefix',
                'city_suffix',
                'street_suffix',
                'county',
                'country',
                'country_code',
                'country_code_alpha_3',
                'state',
                'state_abbr',
                'street_prefix',
                'postcode',
                'postcode_by_state',
                'direction',
                'direction_abbr',
                'time_zone',
            ],
            animal: [
                'dog',
                'cat',
                'snake',
                'bear',
                'lion',
                'cetacean',
                'insect',
                'crocodilia',
                'cow',
                'bird',
                'fish',
                'rabbit',
                'horse',
                'type',
            ],
            company: [
                'adjective',
                'noun',
                'descriptor',
                'bs_adjective',
                'bs_noun',
                'bs_verb',
                'suffix',
            ],
            lorem: ['words'],
            hacker: ['abbreviation', 'adjective', 'noun', 'verb', 'ingverb', 'phrase'],
            phone_number: ['formats'],
            finance: [
                'account_type',
                'transaction_type',
                'currency',
                'iban',
                'credit_card',
            ],
            internet: [
                'avatar_uri',
                'domain_suffix',
                'free_email',
                'example_email',
                'password',
            ],
            commerce: [
                'color',
                'department',
                'product_name',
                'price',
                'categories',
                'product_description',
            ],
            database: ['collation', 'column', 'engine', 'type'],
            system: ['mimeTypes', 'directoryPaths'],
            date: ['month', 'weekday'],
            vehicle: [
                'vehicle',
                'manufacturer',
                'model',
                'type',
                'fuel',
                'vin',
                'color',
            ],
            music: ['genre'],
            word: [
                'adjective',
                'adverb',
                'conjunction',
                'interjection',
                'noun',
                'preposition',
                'verb',
            ],
            title: '',
            separator: ''
        };
        this.fake = new fake_1.Fake(this).fake;
        this.unique = new unique_1.Unique().unique;
        this.mersenne = new mersenne_1.Mersenne();
        this.random = new random_1.Random(this);
        this.helpers = new helpers_1.Helpers(this);
        this.datatype = new datatype_1.Datatype(this);
        this.address = new address_1.Address(this);
        this.animal = new animal_1.Animal(this);
        this.commerce = new commerce_1.Commerce(this);
        this.company = new company_1.Company(this);
        this.database = new database_1.Database(this);
        this.date = new date_1._Date(this);
        this.finance = new finance_1.Finance(this);
        this.git = new git_1.Git(this);
        this.hacker = new hacker_1.Hacker(this);
        // TODO @Shinigami92 2022-01-12: iban was not used
        // readonly iban = new (require('./iban'))(this);
        this.image = new image_1.Image(this);
        this.internet = new internet_1.Internet(this);
        this.lorem = new lorem_1.Lorem(this);
        this.music = new music_1.Music(this);
        this.name = new name_1.Name(this);
        this.phone = new phone_number_1.Phone(this);
        this.system = new system_1.System(this);
        this.time = new time_1.Time();
        this.vehicle = new vehicle_1.Vehicle(this);
        this.word = new word_1.Word(this);
        this.locales = this.locales || opts.locales || {};
        this.locale = this.locale || opts.locale || 'en';
        this.localeFallback = this.localeFallback || opts.localeFallback || 'en';
        this.loadDefinitions(this.definitionTypes);
    }
    /**
     * Load the definitions contained in the locales file for the given types
     *
     * @param types
     */
    Faker.prototype.loadDefinitions = function (types) {
        var _this = this;
        // TODO @Shinigami92 2022-01-11: Find a way to load this even more dynamically
        // In a way so that we don't accidentally miss a definition
        Object.keys(types).forEach(function (t) {
            if (typeof _this.definitions[t] === 'undefined') {
                _this.definitions[t] = {};
            }
            if (typeof types[t] === 'string') {
                _this.definitions[t] = types[t];
                return;
            }
            // TODO @Shinigami92 2022-01-11: We may have a bug here for the keys 'title' and 'separator'
            // @ts-expect-error
            types[t].forEach(function (p) {
                Object.defineProperty(_this.definitions[t], p, {
                    get: function () {
                        if (typeof _this.locales[_this.locale][t] === 'undefined' ||
                            typeof _this.locales[_this.locale][t][p] === 'undefined') {
                            // certain localization sets contain less data then others.
                            // in the case of a missing definition, use the default localeFallback
                            // to substitute the missing set data
                            // throw new Error('unknown property ' + d + p)
                            return _this.locales[_this.localeFallback][t][p];
                        }
                        else {
                            // return localized data
                            return _this.locales[_this.locale][t][p];
                        }
                    }
                });
            });
        });
    };
    Faker.prototype.seed = function (value) {
        this.seedValue = value;
        this.random = new random_1.Random(this, this.seedValue);
        this.datatype = new datatype_1.Datatype(this, this.seedValue);
    };
    /**
     * Set Faker's locale
     *
     * @param locale
     */
    Faker.prototype.setLocale = function (locale) {
        this.locale = locale;
    };
    return Faker;
}());
exports.Faker = Faker;
exports["default"] = Faker;
module.exports = Faker;
