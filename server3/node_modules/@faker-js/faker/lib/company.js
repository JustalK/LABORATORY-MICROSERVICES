"use strict";
exports.__esModule = true;
exports.Company = void 0;
var f;
var Company = /** @class */ (function () {
    function Company(faker) {
        this.faker = faker;
        f = this.faker.fake;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Company.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * suffixes
     *
     * @method faker.company.suffixes
     */
    Company.prototype.suffixes = function () {
        // Don't want the source array exposed to modification, so return a copy
        return this.faker.definitions.company.suffix.slice(0);
    };
    /**
     * companyName
     *
     * @method faker.company.companyName
     * @param format
     */
    Company.prototype.companyName = function (format) {
        var formats = [
            '{{name.lastName}} {{company.companySuffix}}',
            '{{name.lastName}} - {{name.lastName}}',
            '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}',
        ];
        if (typeof format !== 'number') {
            format = this.faker.datatype.number(formats.length - 1);
        }
        return f(formats[format]);
    };
    /**
     * companySuffix
     *
     * @method faker.company.companySuffix
     */
    Company.prototype.companySuffix = function () {
        return this.faker.random.arrayElement(this.faker.company.suffixes());
    };
    /**
     * catchPhrase
     *
     * @method faker.company.catchPhrase
     */
    Company.prototype.catchPhrase = function () {
        return f('{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}');
    };
    /**
     * bs
     *
     * @method faker.company.bs
     */
    Company.prototype.bs = function () {
        return f('{{company.bsBuzz}} {{company.bsAdjective}} {{company.bsNoun}}');
    };
    /**
     * catchPhraseAdjective
     *
     * @method faker.company.catchPhraseAdjective
     */
    Company.prototype.catchPhraseAdjective = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.adjective);
    };
    /**
     * catchPhraseDescriptor
     *
     * @method faker.company.catchPhraseDescriptor
     */
    Company.prototype.catchPhraseDescriptor = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.descriptor);
    };
    /**
     * catchPhraseNoun
     *
     * @method faker.company.catchPhraseNoun
     */
    Company.prototype.catchPhraseNoun = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.noun);
    };
    /**
     * bsAdjective
     *
     * @method faker.company.bsAdjective
     */
    Company.prototype.bsAdjective = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.bs_adjective);
    };
    /**
     * bsBuzz
     *
     * @method faker.company.bsBuzz
     */
    Company.prototype.bsBuzz = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.bs_verb);
    };
    /**
     * bsNoun
     *
     * @method faker.company.bsNoun
     */
    Company.prototype.bsNoun = function () {
        return this.faker.random.arrayElement(this.faker.definitions.company.bs_noun);
    };
    return Company;
}());
exports.Company = Company;
