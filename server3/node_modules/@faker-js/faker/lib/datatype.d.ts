import type { Faker } from '.';
export declare class Datatype {
    private readonly faker;
    constructor(faker: Faker, seed?: any[] | any);
    /**
     * Returns a single random number based on a max number or range.
     *
     * @method faker.datatype.number
     * @param options
     */
    number(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Returns a single random floating-point number based on a max number or range.
     *
     * @method faker.datatype.float
     * @param options
     */
    float(options?: number | {
        min?: number;
        max?: number;
        precision?: number;
    }): number;
    /**
     * Returns a Date object using a random number of milliseconds since 1. Jan 1970 UTC
     * Caveat: seeding is not working
     *
     * @method faker.datatype.datetime
     * @param options pass min OR max as number of milliseconds since 1. Jan 1970 UTC
     */
    datetime(options: any): Date;
    /**
     * Returns a string, containing UTF-16 chars between 33 and 125 ('!' to '}')
     *
     * @method faker.datatype.string
     * @param length length of generated string, default = 10, max length = 2^20
     */
    string(length?: number): string;
    /**
     * uuid
     *
     * @method faker.datatype.uuid
     */
    uuid(): string;
    /**
     * boolean
     *
     * @method faker.datatype.boolean
     */
    boolean(): boolean;
    /**
     * hexaDecimal
     *
     * @method faker.datatype.hexaDecimal
     * @param count defaults to 1
     */
    hexaDecimal(count?: number): string;
    /**
     * Returns json object with 7 pre-defined properties
     *
     * @method faker.datatype.json
     */
    json(): string;
    /**
     * Returns an array with values generated by faker.datatype.number and faker.datatype.string
     *
     * @method faker.datatype.array
     * @param length length of the returned array
     */
    array(length?: number): Array<string | number>;
    /**
     * Returns a Big Integer with values generated by faker.datatype.bigInt
     *
     * @method faker.datatype.bigInt
     * @param value
     */
    bigInt(value?: string | number | bigint | boolean): bigint;
}
