"use strict";
exports.__esModule = true;
exports.Random = void 0;
/**
 * Method to reduce array of characters.
 *
 * @param arr existing array of characters
 * @param values array of characters which should be removed
 * @return new array without banned characters
 */
function arrayRemove(arr, values) {
    values.forEach(function (value) {
        arr = arr.filter(function (ele) { return ele !== value; });
    });
    return arr;
}
var Random = /** @class */ (function () {
    function Random(faker, seed) {
        this.faker = faker;
        this.randomWord = this.word.bind(this);
        this.randomWords = this.words.bind(this);
        this.randomImage = this.image.bind(this);
        this.randomLocale = this.locale.bind(this);
        // Use a user provided seed if it is an array or number
        if (Array.isArray(seed) && seed.length) {
            this.faker.mersenne.seed_array(seed);
        }
        else if (!isNaN(seed)) {
            this.faker.mersenne.seed(seed);
        }
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Random.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * Returns a single random number based on a max number or range.
     *
     * @method faker.random.number
     * @param options {min, max, precision}
     *
     * @deprecated
     */
    Random.prototype.number = function (options) {
        console.log('Deprecation Warning: faker.random.number is now located in faker.datatype.number');
        return this.faker.datatype.number(options);
    };
    /**
     * Returns a single random floating-point number based on a max number or range.
     *
     * @method faker.random.float
     * @param options
     *
     * @deprecated
     */
    Random.prototype.float = function (options) {
        console.log('Deprecation Warning: faker.random.float is now located in faker.datatype.float');
        return this.faker.datatype.float(options);
    };
    /**
     * Takes an array and returns a random element of the array.
     *
     * @method faker.random.arrayElement
     * @param array
     */
    Random.prototype.arrayElement = function (array) {
        if (array === void 0) { array = ['a', 'b', 'c']; }
        var r = this.faker.datatype.number({ max: array.length - 1 });
        return array[r];
    };
    /**
     * Takes an array and returns a subset with random elements of the array.
     *
     * @method faker.random.arrayElements
     * @param array
     * @param count number of elements to pick
     */
    Random.prototype.arrayElements = function (array, count) {
        if (array === void 0) { array = ['a', 'b', 'c']; }
        if (typeof count !== 'number') {
            count = this.faker.datatype.number({ min: 1, max: array.length });
        }
        else if (count > array.length) {
            count = array.length;
        }
        else if (count < 0) {
            count = 0;
        }
        var arrayCopy = array.slice(0);
        var i = array.length;
        var min = i - count;
        var temp;
        var index;
        while (i-- > min) {
            index = Math.floor((i + 1) * this.faker.datatype.float({ min: 0, max: 0.99 }));
            temp = arrayCopy[index];
            arrayCopy[index] = arrayCopy[i];
            arrayCopy[i] = temp;
        }
        return arrayCopy.slice(min);
    };
    /**
     * Takes an object and returns a random key or value.
     *
     * @method faker.random.objectElement
     * @param object
     * @param field
     */
    // TODO @Shinigami92 2022-01-11: Not sure if these generic types are correct
    Random.prototype.objectElement = function (object, field) {
        if (object === void 0) { object = { foo: 'bar', too: 'car' }; }
        var array = Object.keys(object);
        var key = this.faker.random.arrayElement(array);
        return field === 'key' ? key : object[key];
    };
    /**
     * uuid
     *
     * @method faker.random.uuid
     * @deprecated
     */
    Random.prototype.uuid = function () {
        console.log('Deprecation Warning: faker.random.uuid is now located in faker.datatype.uuid');
        return this.faker.datatype.uuid();
    };
    /**
     * boolean
     *
     * @method faker.random.boolean
     */
    Random.prototype.boolean = function () {
        console.log('Deprecation Warning: faker.random.boolean is now located in faker.datatype.boolean');
        return this.faker.datatype.boolean();
    };
    // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc
    /**
     * word
     *
     * @method faker.random.word
     * @param type
     */
    // TODO @Shinigami92 2022-01-11: `type` is not in use
    Random.prototype.word = function (type) {
        var wordMethods = [
            'commerce.department',
            'commerce.productName',
            'commerce.productAdjective',
            'commerce.productMaterial',
            'commerce.product',
            'commerce.color',
            'company.catchPhraseAdjective',
            'company.catchPhraseDescriptor',
            'company.catchPhraseNoun',
            'company.bsAdjective',
            'company.bsBuzz',
            'company.bsNoun',
            'address.streetSuffix',
            'address.county',
            'address.country',
            'address.state',
            'finance.accountName',
            'finance.transactionType',
            'finance.currencyName',
            'hacker.noun',
            'hacker.verb',
            'hacker.adjective',
            'hacker.ingverb',
            'hacker.abbreviation',
            'name.jobDescriptor',
            'name.jobArea',
            'name.jobType',
        ];
        // randomly pick from the many faker methods that can generate words
        var randomWordMethod = this.faker.random.arrayElement(wordMethods);
        var result = this.faker.fake('{{' + randomWordMethod + '}}');
        return this.faker.random.arrayElement(result.split(' '));
    };
    /**
     * randomWords
     *
     * @method faker.random.words
     * @param count defaults to a random value between 1 and 3
     */
    Random.prototype.words = function (count) {
        var words = [];
        if (typeof count === 'undefined') {
            count = this.faker.datatype.number({ min: 1, max: 3 });
        }
        for (var i = 0; i < count; i++) {
            words.push(this.faker.random.word());
        }
        return words.join(' ');
    };
    /**
     * locale
     *
     * @method faker.random.image
     */
    Random.prototype.image = function () {
        return this.faker.image.image();
    };
    /**
     * locale
     *
     * @method faker.random.locale
     */
    Random.prototype.locale = function () {
        return this.faker.random.arrayElement(Object.keys(this.faker.locales));
    };
    /**
     * alpha. returns lower/upper alpha characters based count and upcase options
     *
     * @method faker.random.alpha
     * @param options // defaults to { count: 1, upcase: false, bannedChars: [] }
     */
    Random.prototype.alpha = function (options) {
        if (typeof options === 'undefined') {
            options = {
                count: 1
            };
        }
        else if (typeof options === 'number') {
            options = {
                count: options
            };
        }
        else if (typeof options.count === 'undefined') {
            options.count = 1;
        }
        if (typeof options.upcase === 'undefined') {
            options.upcase = false;
        }
        if (typeof options.bannedChars === 'undefined') {
            options.bannedChars = [];
        }
        var wholeString = '';
        var charsArray = [
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
        ];
        // TODO @Shinigami92 2022-01-11: A default empty array gets assigned above, we should check the length against 0 or not here
        if (options.bannedChars) {
            charsArray = arrayRemove(charsArray, options.bannedChars);
        }
        for (var i = 0; i < options.count; i++) {
            wholeString += this.faker.random.arrayElement(charsArray);
        }
        return options.upcase ? wholeString.toUpperCase() : wholeString;
    };
    /**
     * alphaNumeric
     *
     * @method faker.random.alphaNumeric
     * @param count defaults to 1
     * @param options // defaults to { bannedChars: [] }
     * @param options.bannedChars array of characters which should be banned in new string
     */
    Random.prototype.alphaNumeric = function (count, options) {
        if (count === void 0) { count = 1; }
        if (options === void 0) { options = {}; }
        if (typeof options.bannedChars === 'undefined') {
            options.bannedChars = [];
        }
        var wholeString = '';
        var charsArray = [
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
            'g',
            'h',
            'i',
            'j',
            'k',
            'l',
            'm',
            'n',
            'o',
            'p',
            'q',
            'r',
            's',
            't',
            'u',
            'v',
            'w',
            'x',
            'y',
            'z',
        ];
        if (options) {
            if (options.bannedChars) {
                charsArray = arrayRemove(charsArray, options.bannedChars);
            }
        }
        for (var i = 0; i < count; i++) {
            wholeString += this.faker.random.arrayElement(charsArray);
        }
        return wholeString;
    };
    /**
     * hexaDecimal
     *
     * @method faker.random.hexaDecimal
     * @param count defaults to 1
     * @deprecated
     */
    Random.prototype.hexaDecimal = function (count) {
        console.log('Deprecation Warning: faker.random.hexaDecimal is now located in faker.datatype.hexaDecimal');
        return this.faker.datatype.hexaDecimal(count);
    };
    return Random;
}());
exports.Random = Random;
