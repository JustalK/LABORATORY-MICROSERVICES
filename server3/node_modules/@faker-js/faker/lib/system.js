"use strict";
// generates fake data for many computer systems properties
exports.__esModule = true;
exports.System = void 0;
var commonFileTypes = ['video', 'audio', 'image', 'text', 'application'];
var commonMimeTypes = [
    'application/pdf',
    'audio/mpeg',
    'audio/wav',
    'image/png',
    'image/jpeg',
    'image/gif',
    'video/mp4',
    'video/mpeg',
    'text/html',
];
function setToArray(set) {
    // shortcut if Array.from is available
    if (Array.from) {
        return Array.from(set);
    }
    var array = [];
    set.forEach(function (item) {
        array.push(item);
    });
    return array;
}
var System = /** @class */ (function () {
    function System(faker) {
        this.faker = faker;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(System.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * generates a file name
     *
     * @method faker.system.fileName
     */
    System.prototype.fileName = function () {
        var str = this.faker.random.words();
        str =
            str.toLowerCase().replace(/\W/g, '_') + '.' + this.faker.system.fileExt();
        return str;
    };
    /**
     * commonFileName
     *
     * @method faker.system.commonFileName
     * @param ext
     */
    System.prototype.commonFileName = function (ext) {
        var str = this.faker.random.words();
        str = str.toLowerCase().replace(/\W/g, '_');
        str += '.' + (ext || this.faker.system.commonFileExt());
        return str;
    };
    /**
     * mimeType
     *
     * @method faker.system.mimeType
     */
    System.prototype.mimeType = function () {
        var typeSet = new Set();
        var extensionSet = new Set();
        var mimeTypes = this.faker.definitions.system.mimeTypes;
        Object.keys(mimeTypes).forEach(function (m) {
            var type = m.split('/')[0];
            typeSet.add(type);
            if (mimeTypes[m].extensions instanceof Array) {
                mimeTypes[m].extensions.forEach(function (ext) {
                    extensionSet.add(ext);
                });
            }
        });
        var types = setToArray(typeSet);
        var extensions = setToArray(extensionSet);
        var mimeTypeKeys = Object.keys(this.faker.definitions.system.mimeTypes);
        return this.faker.random.arrayElement(mimeTypeKeys);
    };
    /**
     * Returns a commonly used file type
     *
     * @method faker.system.commonFileType
     */
    System.prototype.commonFileType = function () {
        return this.faker.random.arrayElement(commonFileTypes);
    };
    /**
     * Returns a commonly used file extension
     *
     * @method faker.system.commonFileExt
     */
    System.prototype.commonFileExt = function () {
        return this.faker.system.fileExt(this.faker.random.arrayElement(commonMimeTypes));
    };
    /**
     * Returns any file type available as mime-type
     *
     * @method faker.system.fileType
     */
    System.prototype.fileType = function () {
        var typeSet = new Set();
        var extensionSet = new Set();
        var mimeTypes = this.faker.definitions.system.mimeTypes;
        Object.keys(mimeTypes).forEach(function (m) {
            var type = m.split('/')[0];
            typeSet.add(type);
            if (mimeTypes[m].extensions instanceof Array) {
                mimeTypes[m].extensions.forEach(function (ext) {
                    extensionSet.add(ext);
                });
            }
        });
        var types = setToArray(typeSet);
        var extensions = setToArray(extensionSet);
        var mimeTypeKeys = Object.keys(this.faker.definitions.system.mimeTypes);
        return this.faker.random.arrayElement(types);
    };
    /**
     * fileExt
     *
     * @method faker.system.fileExt
     * @param mimeType
     */
    System.prototype.fileExt = function (mimeType) {
        var typeSet = new Set();
        var extensionSet = new Set();
        var mimeTypes = this.faker.definitions.system.mimeTypes;
        Object.keys(mimeTypes).forEach(function (m) {
            var type = m.split('/')[0];
            typeSet.add(type);
            if (mimeTypes[m].extensions instanceof Array) {
                mimeTypes[m].extensions.forEach(function (ext) {
                    extensionSet.add(ext);
                });
            }
        });
        var types = setToArray(typeSet);
        var extensions = setToArray(extensionSet);
        var mimeTypeKeys = Object.keys(this.faker.definitions.system.mimeTypes);
        if (mimeType) {
            var mimes = this.faker.definitions.system.mimeTypes;
            return this.faker.random.arrayElement(mimes[mimeType].extensions);
        }
        return this.faker.random.arrayElement(extensions);
    };
    /**
     * Returns directory path
     *
     * @method faker.system.directoryPath
     */
    System.prototype.directoryPath = function () {
        var paths = this.faker.definitions.system.directoryPaths;
        return this.faker.random.arrayElement(paths);
    };
    /**
     * returns file path
     *
     * @method faker.system.filePath
     */
    System.prototype.filePath = function () {
        return this.faker.fake('{{system.directoryPath}}/{{system.fileName}}.{{system.fileExt}}');
    };
    /**
     * semver
     *
     * @method faker.system.semver
     */
    System.prototype.semver = function () {
        return [
            this.faker.datatype.number(9),
            this.faker.datatype.number(9),
            this.faker.datatype.number(9),
        ].join('.');
    };
    return System;
}());
exports.System = System;
