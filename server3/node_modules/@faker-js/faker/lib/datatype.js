"use strict";
exports.__esModule = true;
exports.Datatype = void 0;
var Datatype = /** @class */ (function () {
    function Datatype(faker, seed) {
        this.faker = faker;
        // Use a user provided seed if it is an array or number
        if (Array.isArray(seed) && seed.length) {
            this.faker.mersenne.seed_array(seed);
        }
        else if (!isNaN(seed)) {
            this.faker.mersenne.seed(seed);
        }
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Datatype.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * Returns a single random number based on a max number or range.
     *
     * @method faker.datatype.number
     * @param options
     */
    Datatype.prototype.number = function (options) {
        if (typeof options === 'number') {
            options = { max: options };
        }
        options = options !== null && options !== void 0 ? options : {};
        if (typeof options.min === 'undefined') {
            options.min = 0;
        }
        if (typeof options.max === 'undefined') {
            options.max = 99999;
        }
        if (typeof options.precision === 'undefined') {
            options.precision = 1;
        }
        // Make the range inclusive of the max value
        var max = options.max;
        if (max >= 0) {
            max += options.precision;
        }
        var randomNumber = Math.floor(this.faker.mersenne.rand(max / options.precision, options.min / options.precision));
        // Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01
        randomNumber = randomNumber / (1 / options.precision);
        return randomNumber;
    };
    /**
     * Returns a single random floating-point number based on a max number or range.
     *
     * @method faker.datatype.float
     * @param options
     */
    Datatype.prototype.float = function (options) {
        if (typeof options === 'number') {
            options = {
                precision: options
            };
        }
        options = options || {};
        var opts = {};
        for (var p in options) {
            opts[p] = options[p];
        }
        if (typeof opts.precision === 'undefined') {
            opts.precision = 0.01;
        }
        return this.faker.datatype.number(opts);
    };
    /**
     * Returns a Date object using a random number of milliseconds since 1. Jan 1970 UTC
     * Caveat: seeding is not working
     *
     * @method faker.datatype.datetime
     * @param options pass min OR max as number of milliseconds since 1. Jan 1970 UTC
     */
    Datatype.prototype.datetime = function (options) {
        if (typeof options === 'number') {
            options = {
                max: options
            };
        }
        var minMax = 8640000000000000;
        options = options || {};
        if (typeof options.min === 'undefined' || options.min < minMax * -1) {
            options.min = new Date().setFullYear(1990, 1, 1);
        }
        if (typeof options.max === 'undefined' || options.max > minMax) {
            options.max = new Date().setFullYear(2100, 1, 1);
        }
        var random = this.faker.datatype.number(options);
        return new Date(random);
    };
    /**
     * Returns a string, containing UTF-16 chars between 33 and 125 ('!' to '}')
     *
     * @method faker.datatype.string
     * @param length length of generated string, default = 10, max length = 2^20
     */
    Datatype.prototype.string = function (length) {
        if (length === void 0) { length = 10; }
        var maxLength = Math.pow(2, 20);
        if (length >= maxLength) {
            length = maxLength;
        }
        var charCodeOption = {
            min: 33,
            max: 125
        };
        var returnString = '';
        for (var i = 0; i < length; i++) {
            returnString += String.fromCharCode(this.faker.datatype.number(charCodeOption));
        }
        return returnString;
    };
    /**
     * uuid
     *
     * @method faker.datatype.uuid
     */
    Datatype.prototype.uuid = function () {
        var _this = this;
        var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        var replacePlaceholders = function (placeholder) {
            var random = _this.faker.datatype.number({ min: 0, max: 15 });
            var value = placeholder == 'x' ? random : (random & 0x3) | 0x8;
            return value.toString(16);
        };
        return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
    };
    /**
     * boolean
     *
     * @method faker.datatype.boolean
     */
    Datatype.prototype.boolean = function () {
        return !!this.faker.datatype.number(1);
    };
    /**
     * hexaDecimal
     *
     * @method faker.datatype.hexaDecimal
     * @param count defaults to 1
     */
    Datatype.prototype.hexaDecimal = function (count) {
        if (count === void 0) { count = 1; }
        var wholeString = '';
        for (var i = 0; i < count; i++) {
            wholeString += this.faker.random.arrayElement([
                '0',
                '1',
                '2',
                '3',
                '4',
                '5',
                '6',
                '7',
                '8',
                '9',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'A',
                'B',
                'C',
                'D',
                'E',
                'F',
            ]);
        }
        return '0x' + wholeString;
    };
    /**
     * Returns json object with 7 pre-defined properties
     *
     * @method faker.datatype.json
     */
    Datatype.prototype.json = function () {
        var _this = this;
        var properties = ['foo', 'bar', 'bike', 'a', 'b', 'name', 'prop'];
        var returnObject = {};
        properties.forEach(function (prop) {
            returnObject[prop] = _this.faker.datatype.boolean()
                ? _this.faker.datatype.string()
                : _this.faker.datatype.number();
        });
        return JSON.stringify(returnObject);
    };
    /**
     * Returns an array with values generated by faker.datatype.number and faker.datatype.string
     *
     * @method faker.datatype.array
     * @param length length of the returned array
     */
    Datatype.prototype.array = function (length) {
        if (length === void 0) { length = 10; }
        var returnArray = new Array(length);
        for (var i = 0; i < length; i++) {
            returnArray[i] = this.faker.datatype.boolean()
                ? this.faker.datatype.string()
                : this.faker.datatype.number();
        }
        return returnArray;
    };
    /**
     * Returns a Big Integer with values generated by faker.datatype.bigInt
     *
     * @method faker.datatype.bigInt
     * @param value
     */
    Datatype.prototype.bigInt = function (value) {
        if (value === undefined) {
            value =
                Math.floor(this.faker.datatype.number() * 99999999999) + 10000000000;
        }
        return BigInt(value);
    };
    return Datatype;
}());
exports.Datatype = Datatype;
