"use strict";
exports.__esModule = true;
exports.Vehicle = void 0;
var fake;
var Vehicle = /** @class */ (function () {
    function Vehicle(faker) {
        this.faker = faker;
        fake = faker.fake;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Vehicle.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
        // TODO @Shinigami92 2022-01-13: Find better strategy
        // @ts-expect-error
        this.vehicle.schema = {
            description: 'Generates a random vehicle.',
            sampleResults: ['BMW Explorer', 'Ford Camry', 'Lamborghini Ranchero']
        };
        // @ts-expect-error
        this.manufacturer.schema = {
            description: 'Generates a manufacturer name.',
            sampleResults: ['Ford', 'Jeep', 'Tesla']
        };
        // @ts-expect-error
        this.model.schema = {
            description: 'Generates a vehicle model.',
            sampleResults: ['Explorer', 'Camry', 'Ranchero']
        };
        // @ts-expect-error
        this.type.schema = {
            description: 'Generates a vehicle type.',
            sampleResults: ['Coupe', 'Convertable', 'Sedan', 'SUV']
        };
        // @ts-expect-error
        this.fuel.schema = {
            description: 'Generates a fuel type.',
            sampleResults: ['Electric', 'Gasoline', 'Diesel']
        };
        // @ts-expect-error
        this.vin.schema = {
            description: 'Generates a valid VIN number.',
            sampleResults: ['YV1MH682762184654', '3C7WRMBJ2EG208836']
        };
        // @ts-expect-error
        this.color.schema = {
            description: 'Generates a color',
            sampleResults: ['red', 'white', 'black']
        };
        // @ts-expect-error
        this.vrm.schema = {
            description: 'Generates a vehicle vrm',
            sampleResults: ['MF56UPA', 'GL19AAQ', 'SF20TTA']
        };
        // @ts-expect-error
        this.bicycle.schema = {
            description: 'Generates a type of bicycle',
            sampleResults: [
                'Adventure Road Bicycle',
                'City Bicycle',
                'Recumbent Bicycle',
            ]
        };
    }
    /**
     * vehicle
     *
     * @method faker.vehicle.vehicle
     */
    Vehicle.prototype.vehicle = function () {
        return fake('{{vehicle.manufacturer}} {{vehicle.model}}');
    };
    /**
     * manufacturer
     *
     * @method faker.vehicle.manufacturer
     */
    Vehicle.prototype.manufacturer = function () {
        return this.faker.random.arrayElement(this.faker.definitions.vehicle.manufacturer);
    };
    /**
     * model
     *
     * @method faker.vehicle.model
     */
    Vehicle.prototype.model = function () {
        return this.faker.random.arrayElement(this.faker.definitions.vehicle.model);
    };
    /**
     * type
     *
     * @method faker.vehicle.type
     */
    Vehicle.prototype.type = function () {
        return this.faker.random.arrayElement(this.faker.definitions.vehicle.type);
    };
    /**
     * fuel
     *
     * @method faker.vehicle.fuel
     */
    Vehicle.prototype.fuel = function () {
        return this.faker.random.arrayElement(this.faker.definitions.vehicle.fuel);
    };
    /**
     * vin
     *
     * @method faker.vehicle.vin
     */
    Vehicle.prototype.vin = function () {
        var bannedChars = ['o', 'i', 'q'];
        return (this.faker.random.alphaNumeric(10, { bannedChars: bannedChars }) +
            this.faker.random.alpha({
                count: 1,
                upcase: true,
                bannedChars: bannedChars
            }) +
            this.faker.random.alphaNumeric(1, { bannedChars: bannedChars }) +
            this.faker.datatype.number({ min: 10000, max: 100000 })) // return five digit #
            .toUpperCase();
    };
    /**
     * color
     *
     * @method faker.vehicle.color
     */
    Vehicle.prototype.color = function () {
        return fake('{{commerce.color}}');
    };
    /**
     * vrm
     *
     * @method faker.vehicle.vrm
     */
    Vehicle.prototype.vrm = function () {
        return (this.faker.random.alpha({ count: 2, upcase: true }) +
            this.faker.datatype.number({ min: 0, max: 9 }) +
            this.faker.datatype.number({ min: 0, max: 9 }) +
            this.faker.random.alpha({ count: 3, upcase: true })).toUpperCase();
    };
    /**
     * bicycle
     *
     * @method faker.vehicle.bicycle
     */
    Vehicle.prototype.bicycle = function () {
        return this.faker.random.arrayElement(this.faker.definitions.vehicle.bicycle_type);
    };
    return Vehicle;
}());
exports.Vehicle = Vehicle;
