"use strict";
exports.__esModule = true;
exports.Finance = void 0;
var iban_1 = require("./iban");
var Finance = /** @class */ (function () {
    function Finance(faker) {
        this.faker = faker;
        this.ibanLib = iban_1["default"];
        this.Helpers = this.faker.helpers;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Finance.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * account
     *
     * @method faker.finance.account
     * @param length
     */
    Finance.prototype.account = function (length) {
        length || (length = 8);
        var template = '';
        for (var i = 0; i < length; i++) {
            template += '#';
        }
        length = null;
        return this.Helpers.replaceSymbolWithNumber(template);
    };
    /**
     * accountName
     *
     * @method faker.finance.accountName
     */
    Finance.prototype.accountName = function () {
        return [
            this.Helpers.randomize(this.faker.definitions.finance.account_type),
            'Account',
        ].join(' ');
    };
    /**
     * routingNumber
     *
     * @method faker.finance.routingNumber
     */
    Finance.prototype.routingNumber = function () {
        var routingNumber = this.Helpers.replaceSymbolWithNumber('########');
        // Modules 10 straight summation.
        var sum = 0;
        for (var i = 0; i < routingNumber.length; i += 3) {
            sum += Number(routingNumber[i]) * 3;
            sum += Number(routingNumber[i + 1]) * 7;
            sum += Number(routingNumber[i + 2]) || 0;
        }
        return routingNumber + (Math.ceil(sum / 10) * 10 - sum);
    };
    /**
     * mask
     *
     * @method faker.finance.mask
     * @param length
     * @param parens
     * @param ellipsis
     */
    Finance.prototype.mask = function (length, parens, ellipsis) {
        // set defaults
        length =
            length == 0 || !length || typeof length == 'undefined' ? 4 : length;
        parens = parens == null ? true : parens;
        ellipsis = ellipsis == null ? true : ellipsis;
        // create a template for length
        var template = '';
        for (var i = 0; i < length; i++) {
            template = template + '#';
        }
        //prefix with ellipsis
        template = ellipsis ? ['...', template].join('') : template;
        template = parens ? ['(', template, ')'].join('') : template;
        //generate random numbers
        template = this.Helpers.replaceSymbolWithNumber(template);
        return template;
    };
    // min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
    // NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol
    /**
     * amount
     *
     * @method faker.finance.amount
     * @param min
     * @param max
     * @param dec
     * @param symbol
     */
    Finance.prototype.amount = function (min, max, dec, symbol, autoFormat) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1000; }
        if (dec === void 0) { dec = 2; }
        if (symbol === void 0) { symbol = ''; }
        var randValue = this.faker.datatype.number({
            max: max,
            min: min,
            precision: Math.pow(10, -dec)
        });
        var formattedString;
        if (autoFormat) {
            formattedString = randValue.toLocaleString(undefined, {
                minimumFractionDigits: dec
            });
        }
        else {
            formattedString = randValue.toFixed(dec);
        }
        return symbol + formattedString;
    };
    /**
     * transactionType
     *
     * @method faker.finance.transactionType
     */
    Finance.prototype.transactionType = function () {
        return this.Helpers.randomize(this.faker.definitions.finance.transaction_type);
    };
    /**
     * currencyCode
     *
     * @method faker.finance.currencyCode
     */
    Finance.prototype.currencyCode = function () {
        // TODO @Shinigami92 2022-01-14: missing second parameter
        // @ts-expect-error
        return this.faker.random.objectElement(this.faker.definitions.finance.currency)['code'];
    };
    /**
     * currencyName
     *
     * @method faker.finance.currencyName
     */
    Finance.prototype.currencyName = function () {
        return this.faker.random.objectElement(this.faker.definitions.finance.currency, 'key');
    };
    /**
     * currencySymbol
     *
     * @method faker.finance.currencySymbol
     */
    Finance.prototype.currencySymbol = function () {
        var symbol;
        while (!symbol) {
            symbol =
                // TODO @Shinigami92 2022-01-14: missing second parameter
                // @ts-expect-error
                this.faker.random.objectElement(this.faker.definitions.finance.currency)['symbol'];
        }
        return symbol;
    };
    /**
     * bitcoinAddress
     *
     * @method  faker.finance.bitcoinAddress
     */
    Finance.prototype.bitcoinAddress = function () {
        var addressLength = this.faker.datatype.number({ min: 25, max: 34 });
        var address = this.faker.random.arrayElement(['1', '3']);
        for (var i = 0; i < addressLength - 1; i++)
            address += this.faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));
        return address;
    };
    /**
     * litecoinAddress
     *
     * @method faker.finance.litecoinAddress
     */
    Finance.prototype.litecoinAddress = function () {
        var addressLength = this.faker.datatype.number({ min: 26, max: 33 });
        var address = this.faker.random.arrayElement(['L', 'M', '3']);
        for (var i = 0; i < addressLength - 1; i++)
            address += this.faker.random.arrayElement('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split(''));
        return address;
    };
    /**
     * Credit card number
     *
     * @method faker.finance.creditCardNumber
     * @param provider scheme
     */
    Finance.prototype.creditCardNumber = function (provider) {
        if (provider === void 0) { provider = ''; }
        var format;
        var formats;
        var localeFormat = this.faker.definitions.finance.credit_card;
        if (provider in localeFormat) {
            formats = localeFormat[provider]; // there could be multiple formats
            if (typeof formats === 'string') {
                format = formats;
            }
            else {
                format = this.faker.random.arrayElement(formats);
            }
        }
        else if (provider.match(/#/)) {
            // The user chose an optional scheme
            format = provider;
        }
        else {
            // Choose a random provider
            if (typeof localeFormat === 'string') {
                format = localeFormat;
            }
            else if (typeof localeFormat === 'object') {
                // Credit cards are in a object structure
                formats = this.faker.random.objectElement(localeFormat, 'value'); // There could be multiple formats
                if (typeof formats === 'string') {
                    format = formats;
                }
                else {
                    format = this.faker.random.arrayElement(formats);
                }
            }
        }
        format = format.replace(/\//g, '');
        return this.Helpers.replaceCreditCardSymbols(format);
    };
    /**
     * Credit card CVV
     *
     * @method faker.finance.creditCardCVV
     */
    Finance.prototype.creditCardCVV = function () {
        var cvv = '';
        for (var i = 0; i < 3; i++) {
            cvv += this.faker.datatype.number({ max: 9 }).toString();
        }
        return cvv;
    };
    /**
     * ethereumAddress
     *
     * @method faker.finance.ethereumAddress
     */
    Finance.prototype.ethereumAddress = function () {
        var address = this.faker.datatype.hexaDecimal(40).toLowerCase();
        return address;
    };
    /**
     * iban
     *
     * @param formatted Return a formatted version of the generated IBAN.
     * @param countryCode The country code from which you want to generate an IBAN, if none is provided a random country will be used.
     * @throws Will throw an error if the passed country code is not supported.
     *
     * @method faker.finance.iban
     */
    Finance.prototype.iban = function (formatted, countryCode) {
        if (formatted === void 0) { formatted = false; }
        var ibanFormat;
        if (countryCode) {
            var findFormat = function (currentFormat) {
                return currentFormat.country === countryCode;
            };
            ibanFormat = this.ibanLib.formats.find(findFormat);
        }
        else {
            ibanFormat = this.faker.random.arrayElement(this.ibanLib.formats);
        }
        if (!ibanFormat) {
            throw new Error('Country code ' + countryCode + ' not supported.');
        }
        var s = '';
        var count = 0;
        for (var b = 0; b < ibanFormat.bban.length; b++) {
            var bban = ibanFormat.bban[b];
            var c = bban.count;
            count += bban.count;
            while (c > 0) {
                if (bban.type == 'a') {
                    s += this.faker.random.arrayElement(this.ibanLib.alpha);
                }
                else if (bban.type == 'c') {
                    if (this.faker.datatype.number(100) < 80) {
                        s += this.faker.datatype.number(9);
                    }
                    else {
                        s += this.faker.random.arrayElement(this.ibanLib.alpha);
                    }
                }
                else {
                    if (c >= 3 && this.faker.datatype.number(100) < 30) {
                        if (this.faker.datatype.boolean()) {
                            s += this.faker.random.arrayElement(this.ibanLib.pattern100);
                            c -= 2;
                        }
                        else {
                            s += this.faker.random.arrayElement(this.ibanLib.pattern10);
                            c--;
                        }
                    }
                    else {
                        s += this.faker.datatype.number(9);
                    }
                }
                c--;
            }
            s = s.substring(0, count);
        }
        var checksum = 98 -
            this.ibanLib.mod97(this.ibanLib.toDigitString(s + ibanFormat.country + '00'));
        if (checksum < 10) {
            checksum = '0' + checksum;
        }
        var iban = ibanFormat.country + checksum + s;
        return formatted ? iban.match(/.{1,4}/g).join(' ') : iban;
    };
    /**
     * bic
     *
     * @method faker.finance.bic
     */
    Finance.prototype.bic = function () {
        var vowels = ['A', 'E', 'I', 'O', 'U'];
        var prob = this.faker.datatype.number(100);
        return (this.Helpers.replaceSymbols('???') +
            this.faker.random.arrayElement(vowels) +
            this.faker.random.arrayElement(this.ibanLib.iso3166) +
            this.Helpers.replaceSymbols('?') +
            '1' +
            (prob < 10
                ? this.Helpers.replaceSymbols('?' + this.faker.random.arrayElement(vowels) + '?')
                : prob < 40
                    ? this.Helpers.replaceSymbols('###')
                    : ''));
    };
    /**
     * description
     *
     * @method faker.finance.transactionDescription
     */
    Finance.prototype.transactionDescription = function () {
        var transaction = this.Helpers.createTransaction();
        var account = transaction.account;
        var amount = transaction.amount;
        var transactionType = transaction.type;
        var company = transaction.business;
        var card = this.faker.finance.mask();
        var currency = this.faker.finance.currencyCode();
        return (transactionType +
            ' transaction at ' +
            company +
            ' using card ending with ***' +
            card +
            ' for ' +
            currency +
            ' ' +
            amount +
            ' in account ***' +
            account);
    };
    return Finance;
}());
exports.Finance = Finance;
