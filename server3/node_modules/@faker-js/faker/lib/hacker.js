"use strict";
exports.__esModule = true;
exports.Hacker = void 0;
var Hacker = /** @class */ (function () {
    function Hacker(faker) {
        this.faker = faker;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Hacker.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * abbreviation
     *
     * @method faker.hacker.abbreviation
     */
    Hacker.prototype.abbreviation = function () {
        return this.faker.random.arrayElement(this.faker.definitions.hacker.abbreviation);
    };
    /**
     * adjective
     *
     * @method faker.hacker.adjective
     */
    Hacker.prototype.adjective = function () {
        return this.faker.random.arrayElement(this.faker.definitions.hacker.adjective);
    };
    /**
     * noun
     *
     * @method faker.hacker.noun
     */
    Hacker.prototype.noun = function () {
        return this.faker.random.arrayElement(this.faker.definitions.hacker.noun);
    };
    /**
     * verb
     *
     * @method faker.hacker.verb
     */
    Hacker.prototype.verb = function () {
        return this.faker.random.arrayElement(this.faker.definitions.hacker.verb);
    };
    /**
     * ingverb
     *
     * @method faker.hacker.ingverb
     */
    Hacker.prototype.ingverb = function () {
        return this.faker.random.arrayElement(this.faker.definitions.hacker.ingverb);
    };
    /**
     * phrase
     *
     * @method faker.hacker.phrase
     */
    Hacker.prototype.phrase = function () {
        var data = {
            abbreviation: this.abbreviation,
            adjective: this.adjective,
            ingverb: this.ingverb,
            noun: this.noun,
            verb: this.verb
        };
        var phrase = this.faker.random.arrayElement(this.faker.definitions.hacker.phrase);
        return this.faker.helpers.mustache(phrase, data);
    };
    return Hacker;
}());
exports.Hacker = Hacker;
