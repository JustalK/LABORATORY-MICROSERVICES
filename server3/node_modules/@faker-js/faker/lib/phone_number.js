"use strict";
exports.__esModule = true;
exports.Phone = void 0;
var Phone = /** @class */ (function () {
    function Phone(faker) {
        this.faker = faker;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Phone.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * phoneNumber
     *
     * @method faker.phone.phoneNumber
     * @param format
     * @memberOf faker.phone
     */
    Phone.prototype.phoneNumber = function (format) {
        format || (format = this.faker.phone.phoneFormats());
        return this.faker.helpers.replaceSymbolWithNumber(format);
    };
    // FIXME: this is strange passing in an array index.
    /**
     * phoneNumberFormat
     *
     * @method faker.phone.phoneFormatsArrayIndex
     * @param phoneFormatsArrayIndex
     * @memberOf faker.phone
     */
    Phone.prototype.phoneNumberFormat = function (phoneFormatsArrayIndex) {
        if (phoneFormatsArrayIndex === void 0) { phoneFormatsArrayIndex = 0; }
        return this.faker.helpers.replaceSymbolWithNumber(this.faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
    };
    /**
     * phoneFormats
     *
     * @method faker.phone.phoneFormats
     */
    Phone.prototype.phoneFormats = function () {
        return this.faker.random.arrayElement(this.faker.definitions.phone_number.formats);
    };
    return Phone;
}());
exports.Phone = Phone;
