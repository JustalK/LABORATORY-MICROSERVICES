import type { Faker } from '.';
import type { Helpers } from './helpers';
export declare class Finance {
    private readonly faker;
    readonly ibanLib: {
        alpha: string[];
        pattern10: string[];
        pattern100: string[];
        toDigitString: (str: string) => string;
        mod97: (digitStr: any) => number;
        formats: {
            country: string;
            total: number;
            bban: {
                type: string;
                count: number;
            }[];
            format: string;
        }[];
        iso3166: string[];
    };
    readonly Helpers: Helpers;
    constructor(faker: Faker);
    /**
     * account
     *
     * @method faker.finance.account
     * @param length
     */
    account(length?: number): string;
    /**
     * accountName
     *
     * @method faker.finance.accountName
     */
    accountName(): string;
    /**
     * routingNumber
     *
     * @method faker.finance.routingNumber
     */
    routingNumber(): string;
    /**
     * mask
     *
     * @method faker.finance.mask
     * @param length
     * @param parens
     * @param ellipsis
     */
    mask(length?: number, parens?: boolean, ellipsis?: boolean): string;
    /**
     * amount
     *
     * @method faker.finance.amount
     * @param min
     * @param max
     * @param dec
     * @param symbol
     */
    amount(min?: number, max?: number, dec?: number, symbol?: string, autoFormat?: boolean): string;
    /**
     * transactionType
     *
     * @method faker.finance.transactionType
     */
    transactionType(): string;
    /**
     * currencyCode
     *
     * @method faker.finance.currencyCode
     */
    currencyCode(): any;
    /**
     * currencyName
     *
     * @method faker.finance.currencyName
     */
    currencyName(): any;
    /**
     * currencySymbol
     *
     * @method faker.finance.currencySymbol
     */
    currencySymbol(): any;
    /**
     * bitcoinAddress
     *
     * @method  faker.finance.bitcoinAddress
     */
    bitcoinAddress(): string;
    /**
     * litecoinAddress
     *
     * @method faker.finance.litecoinAddress
     */
    litecoinAddress(): string;
    /**
     * Credit card number
     *
     * @method faker.finance.creditCardNumber
     * @param provider scheme
     */
    creditCardNumber(provider?: string): string;
    /**
     * Credit card CVV
     *
     * @method faker.finance.creditCardCVV
     */
    creditCardCVV(): string;
    /**
     * ethereumAddress
     *
     * @method faker.finance.ethereumAddress
     */
    ethereumAddress(): string;
    /**
     * iban
     *
     * @param formatted Return a formatted version of the generated IBAN.
     * @param countryCode The country code from which you want to generate an IBAN, if none is provided a random country will be used.
     * @throws Will throw an error if the passed country code is not supported.
     *
     * @method faker.finance.iban
     */
    iban(formatted: boolean, countryCode: string): string;
    /**
     * bic
     *
     * @method faker.finance.bic
     */
    bic(): string;
    /**
     * description
     *
     * @method faker.finance.transactionDescription
     */
    transactionDescription(): string;
}
