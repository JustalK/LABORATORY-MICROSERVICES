"use strict";
exports.__esModule = true;
exports.Database = void 0;
var Database = /** @class */ (function () {
    function Database(faker) {
        this.faker = faker;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Database.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
        // TODO @Shinigami92 2022-01-11: We should find a better strategy as assigning this property to a function
        // @ts-expect-error
        this.column.schema = {
            description: 'Generates a column name.',
            sampleResults: ['id', 'title', 'createdAt']
        };
        // @ts-expect-error
        this.type.schema = {
            description: 'Generates a column type.',
            sampleResults: ['byte', 'int', 'varchar', 'timestamp']
        };
        // @ts-expect-error
        this.collation.schema = {
            description: 'Generates a collation.',
            sampleResults: ['utf8_unicode_ci', 'utf8_bin']
        };
        // @ts-expect-error
        this.engine.schema = {
            description: 'Generates a storage engine.',
            sampleResults: ['MyISAM', 'InnoDB']
        };
    }
    /**
     * column
     *
     * @method faker.database.column
     */
    Database.prototype.column = function () {
        return this.faker.random.arrayElement(this.faker.definitions.database.column);
    };
    /**
     * type
     *
     * @method faker.database.type
     */
    Database.prototype.type = function () {
        return this.faker.random.arrayElement(this.faker.definitions.database.type);
    };
    /**
     * collation
     *
     * @method faker.database.collation
     */
    Database.prototype.collation = function () {
        return this.faker.random.arrayElement(this.faker.definitions.database.collation);
    };
    /**
     * engine
     *
     * @method faker.database.engine
     */
    Database.prototype.engine = function () {
        return this.faker.random.arrayElement(this.faker.definitions.database.engine);
    };
    return Database;
}());
exports.Database = Database;
