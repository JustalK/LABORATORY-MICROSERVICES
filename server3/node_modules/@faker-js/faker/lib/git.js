"use strict";
exports.__esModule = true;
exports.Git = void 0;
var Git = /** @class */ (function () {
    function Git(faker) {
        this.faker = faker;
        this.hexChars = [
            '0',
            '1',
            '2',
            '3',
            '4',
            '5',
            '6',
            '7',
            '8',
            '9',
            'a',
            'b',
            'c',
            'd',
            'e',
            'f',
        ];
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Git.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * branch
     *
     * @method faker.git.branch
     */
    Git.prototype.branch = function () {
        var noun = this.faker.hacker.noun().replace(' ', '-');
        var verb = this.faker.hacker.verb().replace(' ', '-');
        return noun + '-' + verb;
    };
    /**
     * commitEntry
     *
     * @method faker.git.commitEntry
     * @param options
     */
    Git.prototype.commitEntry = function (options) {
        if (options === void 0) { options = {}; }
        // TODO @Shinigami92 2022-01-11: We may want to make it configurable to use just `\n` instead of `\r\n`
        var entry = 'commit {{git.commitSha}}\r\n';
        if (options.merge || this.faker.datatype.number({ min: 0, max: 4 }) === 0) {
            entry += 'Merge: {{git.shortSha}} {{git.shortSha}}\r\n';
        }
        entry +=
            'Author: {{name.firstName}} {{name.lastName}} <{{internet.email}}>\r\n';
        entry += 'Date: ' + this.faker.date.recent().toString() + '\r\n';
        entry += '\r\n\xa0\xa0\xa0\xa0{{git.commitMessage}}\r\n';
        return this.faker.fake(entry);
    };
    /**
     * commitMessage
     *
     * @method faker.git.commitMessage
     */
    Git.prototype.commitMessage = function () {
        var format = '{{hacker.verb}} {{hacker.adjective}} {{hacker.noun}}';
        return this.faker.fake(format);
    };
    /**
     * commitSha
     *
     * @method faker.git.commitSha
     */
    Git.prototype.commitSha = function () {
        var commit = '';
        for (var i = 0; i < 40; i++) {
            commit += this.faker.random.arrayElement(this.hexChars);
        }
        return commit;
    };
    /**
     * shortSha
     *
     * @method faker.git.shortSha
     */
    Git.prototype.shortSha = function () {
        var shortSha = '';
        for (var i = 0; i < 7; i++) {
            shortSha += this.faker.random.arrayElement(this.hexChars);
        }
        return shortSha;
    };
    return Git;
}());
exports.Git = Git;
