"use strict";
exports.__esModule = true;
exports.Word = void 0;
var Word = /** @class */ (function () {
    function Word(faker) {
        this.faker = faker;
        // Bind `this` so namespaced is working correctly
        for (var _i = 0, _a = Object.getOwnPropertyNames(Word.prototype); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (name_1 === 'constructor' || typeof this[name_1] !== 'function') {
                continue;
            }
            this[name_1] = this[name_1].bind(this);
        }
    }
    /**
     * Returns an adjective of random or optionally specified length.
     * If specified length is unresolvable, returns random adjective.
     *
     * @method faker.word.adjective
     * @param optional length of word to return
     * @returns a random adjective
     */
    Word.prototype.adjective = function (length) {
        var wordList = this.faker.definitions.word.adjective;
        if (length) {
            wordList = this.faker.definitions.word.adjective.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.adjective));
    };
    /**
     * Returns an adverb of random or optionally specified length.
     * If specified length is unresolvable, returns random adverb.
     *
     * @method faker.word.adverb
     * @param optional length of word to return
     * @returns random adverb
     */
    Word.prototype.adverb = function (length) {
        var wordList = this.faker.definitions.word.adverb;
        if (length) {
            wordList = this.faker.definitions.word.adverb.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.adverb));
    };
    /**
     * Returns a conjunction of random or optionally specified length.
     * If specified length is unresolvable, returns random conjunction.
     *
     * @method faker.word.conjunction
     * @param optional length of word to return
     * @returns random conjunction
     */
    Word.prototype.conjunction = function (length) {
        var wordList = this.faker.definitions.word.conjunction;
        if (length) {
            wordList = this.faker.definitions.word.conjunction.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.conjunction));
    };
    /**
     * Returns an interjection of random or optionally specified length.
     * If specified length is unresolvable, returns random interjection.
     *
     * @method faker.word.interjection
     * @param optional length of word to return
     * @returns random interjection
     */
    Word.prototype.interjection = function (length) {
        var wordList = this.faker.definitions.word.interjection;
        if (length) {
            wordList = this.faker.definitions.word.interjection.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.interjection));
    };
    /**
     * Returns a noun of random or optionally specified length.
     * If specified length is unresolvable, returns random noun.
     *
     * @method faker.word.noun
     * @param optional length of word to return
     * @returns random noun
     */
    Word.prototype.noun = function (length) {
        var wordList = this.faker.definitions.word.noun;
        if (length) {
            wordList = this.faker.definitions.word.noun.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.noun));
    };
    /**
     * Returns a preposition of random or optionally specified length.
     * If specified length is unresolvable, returns random preposition.
     *
     * @method faker.word.preposition
     * @param optional length of word to return
     * @returns random preposition
     */
    Word.prototype.preposition = function (length) {
        var wordList = this.faker.definitions.word.preposition;
        if (length) {
            wordList = this.faker.definitions.word.preposition.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.preposition));
    };
    /**
     * Returns a verb of random or optionally specified length.
     * If specified length is unresolvable, returns random verb.
     *
     * @method faker.word.verb
     * @param optional length of word to return
     * @returns random verb
     */
    Word.prototype.verb = function (length) {
        var wordList = this.faker.definitions.word.verb;
        if (length) {
            wordList = this.faker.definitions.word.verb.filter(function (word) { return word.length == length; });
        }
        // If result of filtered word list is undefined, return an element
        // from the unfiltered list.
        return (this.faker.random.arrayElement(wordList) ||
            this.faker.random.arrayElement(this.faker.definitions.word.verb));
    };
    return Word;
}());
exports.Word = Word;
